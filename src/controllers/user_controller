from fastapi import APIRouter, Request, Form
from fastapi.responses import RedirectResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from supabase_client import supabase
from src.utils.auth import get_logged_in_user
from services.auth_service import login_user
from repositories.user_repository import get_user_by_email
router = APIRouter()
templates = Jinja2Templates(directory="templates")

@router.post("/signup")
async def signup(name: str = Form(...), email: str = Form(...), password: str = Form(...)):
    try:
        result = supabase.auth.sign_up({
            "email": email,
            "password": password
        })

        if result.get("error"):
            return {"error": result["error"]["message"]}

        user = result["user"]
        supabase.table("users").insert({
            "user_id": user["id"],  # UUID from auth.users
            "name": name,
            "email": email
        }).execute()

        
        return RedirectResponse(url="/login", status_code=302)

    except Exception as e:
        return {"error": str(e)}
@router.post("/login")
async def login(request: Request, email: str = Form(...), password: str = Form(...)):
    user_email, error = login_user(email, password)
    if error:
        return templates.TemplateResponse("login.html", {
            "request": request,
            "error": error
        })

    response = RedirectResponse(url="/dashboard", status_code=302)
    response.set_cookie(key="user_email", value=user_email, httponly=True)
    return response


@router.get("/dashboard", response_class=HTMLResponse)
def dashboard(request: Request):
    email = get_logged_in_user(request)
    if not email:
        return RedirectResponse(url="/login", status_code=302)

    user = get_user_by_email(email)
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "user": user
    })
    